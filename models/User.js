const mongoose = require('mongoose')
const bcrypt = require('bcryptjs') // Middleware for hashing password before uploading document to DB
const jwt = require('jsonwebtoken') // Used to create instance method for JWT generation

const UserSchema = new mongoose.Schema({ // Can omit 'new', doesnt matter
    name:{
        type:String,
        required:[true, 'Name is required field'],
        minLength: 3,
        maxLength: 50
    },
    email:{
        type:String,
        required:[true, 'Email is required field'],
        match: [
            /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
            , 'Provide a Valid Email'
        ],
        unique:true // The same email cannot be used for multiple accounts
    },
    password:{
        type:String,
        required:[true, 'Password is required field'],
    },
})

// Hash the password in the schema BEFORE creating document
UserSchema.pre('save', async function() {
    const salt = await bcrypt.genSalt(10)
    this.password = await bcrypt.hash(this.password, salt)

    // Resulting hashedPassword has:
    //  Bcrypt algo version ($2b$ or $2a$).
    //  The cost factor (e.g., $10$) -> 2^10 rounds of hashing
    //  The salt (22 characters). eg gpPD9YpnQXV4O.iFWnl5y.
    //  The hashed password (31 characters.) eg WWXA/m4/93asuMLNhzl.WvSnXdXsgh2

})

UserSchema.methods.createJWT = function() {
    return jwt.sign(
        {userID:this._id, name:this.name}, // _id is auto-generated by mongoDB
        process.env.JWT_SECRET, 
        {expiresIn:process.env.JWT_EXPIRE})
}

UserSchema.methods.comparePasswords = async function(plainTextPassword) {
    // Hash+Salt the Plain Text with same salt and cost factor, and see if they match
    const isMatch = await bcrypt.compare(plainTextPassword, this.password)
    return isMatch
}

module.exports = mongoose.model('UserModel', UserSchema)


