openapi: 3.0.0
info:
  title: Jobs_API
  contact: {}
  version: '1.0'
servers:
- url: http://localhost:3000/api/v1
  variables: {}
paths:
  /auth/login:
    post:
      tags:
      - Auth
      summary: Login
      description: Login route for users. Sends back user's name and the JWT token to authorize access to all jobs routes.
      operationId: Login
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/LoginRequest'
              - example:
                  email: bill@hotmail.com
                  password: password
            example:
              email: bill@hotmail.com
              password: password
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /auth/register:
    post:
      tags:
      - Auth
      summary: Register
      description: Register route for new users. Sends back user's name and the JWT token to authorize access to all jobs routes.
      operationId: Register
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/RegisterRequest'
              - example:
                  name: joe
                  email: joe11@gmail.com
                  password: password
            example:
              name: joe
              email: joe11@gmail.com
              password: password
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /jobs:
    get:
      tags:
      - Jobs
      summary: Get All Jobs
      operationId: GetAllJobs
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    post:
      tags:
      - Jobs
      summary: Create a Job
      operationId: CreateaJob
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/CreateaJobRequest'
              - example:
                  company: Amazon
                  position: Robot
            example:
              company: Amazon
              position: Robot
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /jobs/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The Job ID
    get:
      tags:
      - Jobs
      summary: Get one Job
      operationId: GetoneJob
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  
    patch:
      tags:
      - Jobs
      summary: Update a job
      operationId: Updateajob
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UpdateajobRequest'
              - example:
                  company: fe
                  position: qffwf
            example:
              company: fe
              position: qffwf
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  
    delete:
      tags:
      - Jobs
      summary: Delete a Job
      operationId: DeleteaJob
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
components:
  schemas:
    LoginRequest:
      title: LoginRequest
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: bill@hotmail.com
        password: password
    RegisterRequest:
      title: RegisterRequest
      required:
      - name
      - email
      - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: joe
        email: joe11@gmail.com
        password: password
    UpdateajobRequest:
      title: UpdateajobRequest
      required:
      - company
      - position
      type: object
      properties:
        company:
          type: string
        position:
          type: string
      example:
        company: fe
        position: qffwf
    CreateaJobRequest:
      title: CreateaJobRequest
      required:
      - company
      - position
      type: object
      properties:
        company:
          type: string
        position:
          type: string
      example:
        company: Amazon
        position: Robot
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:
- name: Auth
  description: ''
- name: Jobs
  description: ''